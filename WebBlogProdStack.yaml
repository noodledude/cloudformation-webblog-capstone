AWSTemplateFormatVersion: 2010-09-09
Description: >
  Resources for a Web Blog production environment. Contains EC2 web server instances in an ASG and behind an ALB. 
  Should be deployed into an existing networking environment. 

# Still work in progress, this stack won't run

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Default: t2.small
    Type: String
    ConstraintDescription: must be a valid EC2 instance type.
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
  PublicSubnet1:
    Description: ID of an existing Public Subnet
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: must be the ID of an existing Subnet.
  PublicSubnet2:
    Description: ID of a DIFFERENT existing Public Subnet in a different Availability Zone
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: must be the ID of an existing Subnet.
  VPC:
    Description: ID of an existing VPC
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be the ID of an existing VPC.
  LoadBalancerType:
    Description: Choose the type of Load Balancer desired
    Default: application
    Type: String
    ConstraintDescription: choose application, gateway, or network.
    AllowedValues:
      - application
      - gateway
      - network
  RootPassword:
    Description: Enter a desired root user password for database
    Type: String
    AllowedPattern: [A-Za-z0-9]+
    ConstraintDescription: password must match pattern [A-Za-z0-9]+.
    NoEcho: True
Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref WebServerSG
      Type: !Ref LoadBalancerType

  # Change this into a LaunchTemplate so we can do auto-scaling
  WebServerInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiID
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref WebServerSG
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              yum update -y
            # Install LAMP Stack
            - |
              amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
            - |
              yum install -y httpd mariadb-server
            - |
              systemctl start httpd
            - |
              systemctl enable httpd
            - |
              systemctl is-enabled httpd
            - |
              echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
            # Secure MariaDB installation
            - |
              systemctl start mariadb
            - |
              mysql_secure_installation
            # Install SSl/TLS support (Does not have custom certificate implemented)
            - |
              yum install -y mod_ssl
            - |
              /etc/pki/tls/certs/make-dummy-cert localhost.crt
            # Install WordPress blog
            - |
              wget https://wordpress.org/latest.tar.gz
            - |
              tar -xzf latest.tar.gz
            - |
              systemctl start mariadb
            - |
              

  # Incomplete 
  ServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: '5'
      MinSize: '2'
      VPCZoneIdentifier:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref WebServerConfig
      TargetGroupARNs:
        - !Ref TargetGroup

Outputs:  
  WebsiteURL:
    Description: URL for blog site
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - LoadBalancer
          - DNSName
  
